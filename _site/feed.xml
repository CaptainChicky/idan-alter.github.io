<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-04T08:38:10+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dr Alter’s Math Laboratory</title><subtitle>Applying the scientific method to mathematics.</subtitle><author><name>Idan Alter</name></author><entry><title type="html">JavaScript Miscellanea</title><link href="http://localhost:4000/2022/11/01/JavaScript-Miscellanea.html" rel="alternate" type="text/html" title="JavaScript Miscellanea" /><published>2022-11-01T00:00:00+02:00</published><updated>2022-11-01T00:00:00+02:00</updated><id>http://localhost:4000/2022/11/01/JavaScript-Miscellanea</id><content type="html" xml:base="http://localhost:4000/2022/11/01/JavaScript-Miscellanea.html"><![CDATA[<p>Technical details that get in the way instead of helping go here. What’s p5.js? How to orient the canvas? Etc.
<!--more--></p>

<p>Contents:</p>
<ul>
  <li><a href="#prerequisites">Prerequisites</a></li>
  <li><a href="#p5js">p5.js</a>
    <ul>
      <li><a href="#drawing-a-cartesian-plane">Drawing a Cartesian plane</a></li>
    </ul>
  </li>
  <li><a href="#plotlyjs">plotly.js</a></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>I’ll be assuming throughout this blog that you know a bit of coding, just the basic concepts:</p>
<ul>
  <li>variables</li>
  <li>flow control</li>
  <li>functions</li>
</ul>

<p>If that doesn’t mean anything to you, maybe come back here later.  The <a href="https://thecodingtrain.com/guides/getting-started">Coding Train</a> is a good place to start learning JavaScript, but it doesn’t really matter which language you learn, the knowledge is transferable.</p>

<h2 id="p5js">p5.js</h2>

<p>p5.js is a framework focused on <em>“on making coding accessible”</em>. For me, that means I can write cool interactive visualizations (<strong>sketches</strong>, as they are called), with code that’s basically self explanatory. Check it out:<br />
<script src="//toolness.github.io/p5.js-widget/p5-widget.js"></script>
<script type="text/p5" data-height="350" data-preview-width="350">
function setup() {
  createCanvas(200, 200);
  background(220);
  line(width/2, 0, width/2, height);
  line(0, height/2, width, height/2);
}
</script>
Edit the code a bit and run it again. Try changing the second line to <code class="language-plaintext highlighter-rouge">createCanvas(200, 100)</code> with <code class="language-plaintext highlighter-rouge">100</code> instead of <code class="language-plaintext highlighter-rouge">200</code> at the end. Also give <code class="language-plaintext highlighter-rouge">background(110)</code> a go. You can always check the <a href="https://p5js.org/reference/#/p5/background">official reference</a> to find out how something works exactly.</p>

<p>We use the <code class="language-plaintext highlighter-rouge">setup</code> function to create and, well, <em>setup</em> the canvas, but if we want something dynamic, we need to add a <code class="language-plaintext highlighter-rouge">draw</code> function: p5.js calls it repeatedly for as long as this page is open in your browser.</p>

<script type="text/p5" data-height="350" data-preview-width="350">
function setup() {
  createCanvas(200, 200);
  background(220);
}

function draw() {
  background(220);
  rect(mouseX,mouseY,15,15)
}
</script>

<p>Can you guess what <code class="language-plaintext highlighter-rouge">mouseX</code> does? This is what sold me on p5.js. There’s plenty other ways to interact with the sketch, and they’re all just as easy! <a href="https://p5js.org/learn/interactivity.html">This tutorial</a> is a good place to read about them.</p>

<h3 id="drawing-a-cartesian-plane">Drawing a Cartesian plane</h3>

<p>You can imagine that using the canvas to draw points in a Cartesian plane will be useful in a blog about math. Unfortunately for me, the creators of p5.js had the computer graphics community in mind when choosing default settings. I specifically don’t enjoy their answers to the following questions:</p>
<ul>
  <li>Where is the origin?
    <blockquote>
      <p>“top-left.”</p>
    </blockquote>
  </li>
  <li>In which way are the axes directed?
    <blockquote>
      <p>“to the right and <strong>down</strong>.”</p>
    </blockquote>
  </li>
</ul>

<p>The result is that <code class="language-plaintext highlighter-rouge">(x,y)</code> of p5.js is not <em>my</em> \((x,y)\). Let me show you this by drawing a circle of radius 50 pixels around (0,0).</p>

<script type="text/p5" data-height="450" data-preview-width="350">
let t = 0;

function setup() {
  createCanvas(200, 200);
  background(220);
  line(width/2, 0, width/2, height);
  line(0, height/2, width, height/2);
}

function draw() {
  let x = 50*cos(t);
  let y = 50*sin(t);
  stroke("red")
  point(x,y)
  t = t+0.01
}
</script>

<p>What I expect to see, given that we start out with</p>

\[(x,y) = 50\cdot(\cos(0),\sin(0)) = (50,0)\]

<p>and increase the angle inside the trig functions slowly, is a circle going counterclockwise in the middle of the canvas. Obviously, the result is quite different than what I had in mind. Luckily, we have a quick fix for that: add the following code to <code class="language-plaintext highlighter-rouge">draw</code> right before <code class="language-plaintext highlighter-rouge">point(x,y)</code> and run it again.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">  <span class="nx">translate</span><span class="p">(</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// Move the origin to the center of the canvas.</span>
  <span class="nx">scale</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>  <span class="c1">// Make the y-axis point upwards.</span></code></pre></figure>

<h2 id="plotlyjs">plotly.js</h2>
<p>p5.js gives you the ability to draw anything you want on the canvas super easily, but sometimes you might want to plot a function without any boilerplate code. In those cases I use <a href="https://plotly.com/javascript/">plotly.js</a>. It does require working just a bit behind the scenes of this webpage though.</p>

<p>Try it yourself: <button onclick="letsGo()">Go</button> <button onclick="stop()">Stop</button></p>

<script src="https://cdn.plot.ly/plotly-2.16.1.min.js"></script>

<div id="plotly_unit_circle"></div>
<div id="plotly_sin_cos"></div>
<script>
  let trace_unit_circle = {
    x: [50],
    y: [0],
    mode: 'line',
    type: 'scatter',
     };
  Plotly.newPlot('plotly_unit_circle', [trace_unit_circle],{title: "The Unit Circle"});
  var trace11 = {
    x: [0],
    y: [1],
    mode: 'line',
    type: 'scatter',
    name: `$50cos(t)$`
  };
  var trace22 = {
    x: [0],
    y: [0],
    mode: 'line',
    type: 'scatter',
    name: `$50sin(t)$`
  };
  Plotly.newPlot('plotly_sin_cos', [trace11, trace22]);
  let t = 0;
  function updatePlots(){
  let a = 50*Math.cos(t);
  let b = 50*Math.sin(t);
  Plotly.extendTraces('plotly_unit_circle',{
    x: [[a]],
    y: [[b]]
  }, [0]);
  Plotly.extendTraces('plotly_sin_cos',{
    x: [[t],[t]],
    y: [[a], [b]]
  }, [0,1]);
  t += 0.1;
  };
  let interval_id = null;
  function letsGo(){
    if (interval_id === null) {
    interval_id = setInterval(updatePlots,10);
    }
  };
  function stop(){
    clearInterval(interval_id);
    interval_id = null
  };
</script>]]></content><author><name>Idan Alter</name></author><summary type="html"><![CDATA[Technical details that get in the way instead of helping go here. What’s p5.js? How to orient the canvas? Etc.]]></summary></entry></feed>